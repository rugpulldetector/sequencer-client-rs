// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!
pragma solidity 0.8.24;

import "forge-std/Test.sol";

import "@openzeppelin/contracts/interfaces/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "../src/MSLauncherMainnet.sol";


contract MSLauncherTest is Test {
    using SafeERC20 for IERC20;

    function testMSSimulateMainnet() public {
        vm.label(USDC, "USDC");
        vm.label(WETH, "WETH");
        vm.label(msETH, "msETH");
        vm.label(msUSD, "msUSD");
        vm.label(MSPOOL, "msPool");
        vm.label(WETH_msETH_CURVE, "WETH_msETH_CURVE");
        vm.label(msUSD_crvFRAX_CURVE, "msUSD_crvFRAX_CURVE");

        uint256 endNumber = 23114221;
        uint256 blockLookback = 1;
        uint256 startNumber = endNumber - blockLookback;
        uint256 gasLimit = 10000000;

        MSLauncherMainnet launcher;
        uint256 poolCount = 3;
        uint256[] memory bidPrice = new uint256[](poolCount);
        uint256[] memory askPrice = new uint256[](poolCount);   

        for (uint256 blockNo = 0; blockNo < blockLookback; blockNo++) {
            uint256 blockNumber = startNumber + blockNo;
            uint256 profit;
            uint256 chainlinkPrice;
            int256 deltaAmount;
            MSLauncherMainnet simulator;
                
            for (uint256 poolIndex = 0; poolIndex < poolCount; poolIndex++) {
                console.log("----------- Pool Index -------------", poolIndex);

                vm.createSelectFork("mainnet", blockNumber);
                launcher = new MSLauncherMainnet(base_controller);
                (address pool, PoolType poolType) = launcher.getPoolInfo(poolIndex);
                uint256 gas = gasleft();
                int256 startStep = -10 ether;
                int256 startStep2 = -10 ether;
                uint256 gapCount = 40;
                uint256 swapAmount = 10 ether;
                uint256 minProfit = 0.001 ether;
                uint256 stepGap = poolType != PoolType.UNISWAP_V4 ? IERC20(WETH).balanceOf(pool) / gapCount : 10 ether;
                uint256 stepGap2 = stepGap;
                
                emit log_named_decimal_uint("Original Price", launcher.convertSqrtPriceX96ToChainlink(launcher.getSqrtPriceX96(poolIndex)), 8);

                for (uint256 j = 0; j < 5; j++) {
                    vm.createSelectFork("mainnet", blockNumber);
                    launcher = new MSLauncherMainnet(base_controller);
                    simulator = new MSLauncherMainnet(base_controller);
                    deal(WETH, address(simulator), 1000000 ether);
                    deal(USDC, address(simulator), 1 ether);
                    // (bidPrice[poolIndex], chainlinkPrice, deltaAmount, profit) = simulator.getLimitPrice(
                    //     launcher, poolIndex, true, 
                    //     startStep, stepGap, gapCount, swapAmount, 0);

                    (bidPrice[poolIndex], chainlinkPrice, deltaAmount, ) = simulator.getLimitPrice(
                        launcher, poolIndex, true, 
                        startStep, stepGap, gapCount, swapAmount, 0);

                    // console.log("----");
                    // emit log_named_decimal_uint("Bid Price", launcher.convertSqrtPriceX96ToChainlink(bidPrice[poolIndex]), 8);
                    // emit log_named_decimal_uint("Chainlink Price", chainlinkPrice, 8);
                    // emit log_named_decimal_int("Delta Amount", deltaAmount, 18);
                    // emit log_named_decimal_uint("Profit", profit, 18);
                    // emit log_named_decimal_int("Start Step", startStep, 18);
                    // emit log_named_decimal_uint("Step Gap", stepGap, 18);
                    // emit log_named_decimal_uint("Gas", gas - gasleft(), 18);

                    startStep = deltaAmount - int256(stepGap);
                    stepGap = stepGap / 10;
                }

                for (uint256 j = 0; j < 5; j++) {
                    vm.createSelectFork("mainnet", blockNumber);
                    launcher = new MSLauncherMainnet(base_controller);
                    simulator = new MSLauncherMainnet(base_controller);
                    deal(WETH, address(simulator), 1000000 ether);
                    deal(USDC, address(simulator), 1 ether);
                    // (askPrice[poolIndex], chainlinkPrice, deltaAmount, profit) = simulator.getLimitPrice(
                    //     launcher, poolIndex, false, 
                    //     startStep2, stepGap2, gapCount, swapAmount, 0);

                    (askPrice[poolIndex], , deltaAmount, ) = simulator.getLimitPrice(
                        launcher, poolIndex, false, 
                        startStep2, stepGap2, gapCount, swapAmount, 0);

                    // emit log_named_decimal_uint("Ask Price", launcher.convertSqrtPriceX96ToChainlink(askPrice[poolIndex]), 8);
                    // emit log_named_decimal_int("Delta", deltaAmount, 18);
                    // emit log_named_decimal_uint("Profit", profit, 18);
                    // emit log_named_decimal_int("Start Step", startStep2, 18);
                    // emit log_named_decimal_uint("Step Gap", stepGap2, 18);
                    // emit log_named_decimal_uint("Gas", gas - gasleft(), 18);

                    startStep2 = deltaAmount - int256(stepGap2);
                    stepGap2 = stepGap2 / 10;
                }


                // emit log_named_uint("Gas", gas - gasleft());
                // emit log_named_decimal_uint("Final Bid Price", launcher.convertSqrtPriceX96ToChainlink(bidPrice[poolIndex]), 8);
                // emit log_named_decimal_uint("Final Ask Price", launcher.convertSqrtPriceX96ToChainlink(askPrice[poolIndex]), 8);
                // emit log_named_decimal_int("Final Delta", deltaAmount, 18);
            }

            vm.createSelectFork("mainnet", blockNumber);
            MSLauncherRouterMainnnet router = new MSLauncherRouterMainnnet(base_controller);
            launcher = router.getLauncher();

            for (uint256 i = 0; i < poolCount; i++) {
                console.log("Pool Index", i);

                uint256 price = launcher.getSqrtPriceX96(i);   
                // emit log_named_decimal_uint(" Bid Price", bidPrice[i], 0);
                // emit log_named_decimal_uint(" Ask Price", askPrice[i], 0);
                // emit log_named_decimal_uint(" Pool Price", price, 0);

                emit log_named_decimal_uint(" Bid Price(CL)", launcher.convertSqrtPriceX96ToChainlink(bidPrice[i]), 8);
                emit log_named_decimal_uint(" Ask Price(CL)", launcher.convertSqrtPriceX96ToChainlink(askPrice[i]), 8);
                emit log_named_decimal_uint("Pool Price(CL)", launcher.convertSqrtPriceX96ToChainlink(price), 8);

                if (bidPrice[i] > price) {
                    console.log("Sell opportunity");
                } else if (askPrice[i] < price) {
                    console.log("Buy opportunity");
                }
            }

            _launch(router, bidPrice, askPrice, gasLimit);
        }
    }

    function _launch(MSLauncherRouterMainnnet router, uint256[] memory bidPrices, uint256[] memory askPrices, uint256 gasLimit) public {
        emit log_named_uint("Launch", block.number);

        uint96[] memory bidPrices96 = new uint96[](bidPrices.length);
        uint96[] memory askPrices96 = new uint96[](askPrices.length);
        for (uint256 i = 0; i < bidPrices.length; i++) {
            bidPrices96[i] = uint96(bidPrices[i]);
            askPrices96[i] = uint96(askPrices[i]);
        }

        bytes memory data;
        for (uint256 i = 0; i < bidPrices.length; i++) {
            data = bytes.concat(data, bytes20(uint160(bidPrices[i]))); // Cast to bytes12
            data = bytes.concat(data, bytes20(uint160(askPrices[i]))); // Cast to bytes12
        }

        console.logBytes(data);

        uint256 balance = base_controller.balance;
        uint256 gas;

        gas = gasleft();
        router.launch{gas: gasLimit, value: 10}(bidPrices, askPrices);
        uint256 profit = base_controller.balance - balance;
        emit log_named_uint("Gas", gas - gasleft());
        emit log_named_decimal_uint("Profit", profit, 18);
    }
}
